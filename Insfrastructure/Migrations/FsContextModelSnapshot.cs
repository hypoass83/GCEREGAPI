// <auto-generated />
using System;
using Infrastructure.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Insfrastructure.Migrations
{
    [DbContext(typeof(FsContext))]
    partial class FsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Adress", b =>
                {
                    b.Property<int>("AdressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdressID"));

                    b.Property<string>("AdressCellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressPOBox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdressWebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubDivisionID")
                        .HasColumnType("int");

                    b.HasKey("AdressID");

                    b.HasIndex("SubDivisionID");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Division", b =>
                {
                    b.Property<int>("DivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionID"));

                    b.Property<int>("DivisionCode")
                        .HasColumnType("int");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionTag")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("DivisionID");

                    b.HasIndex("RegionID");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionID"));

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<int>("RegionCode")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.SubDivision", b =>
                {
                    b.Property<int>("SubDivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubDivisionID"));

                    b.Property<int>("DivisionID")
                        .HasColumnType("int");

                    b.Property<int>("SubDivisionCode")
                        .HasColumnType("int");

                    b.Property<string>("SubDivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubDivisionID");

                    b.HasIndex("DivisionID");

                    b.ToTable("SubDivisions");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Archive", b =>
                {
                    b.Property<int>("ArchiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArchiveID"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchiveID");

                    b.ToTable("Archives");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<int>("CandNumSeed")
                        .HasColumnType("int");

                    b.Property<int>("ExamCode")
                        .HasColumnType("int");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamType")
                        .HasColumnType("int");

                    b.Property<double>("LateEntryFee")
                        .HasColumnType("float");

                    b.Property<int>("MaxRegSub")
                        .HasColumnType("int");

                    b.Property<int>("MinRegSub")
                        .HasColumnType("int");

                    b.Property<double>("PracticalFee")
                        .HasColumnType("float");

                    b.Property<double>("RegFee")
                        .HasColumnType("float");

                    b.Property<bool>("ReqSpec")
                        .HasColumnType("bit");

                    b.Property<string>("RequiredMax")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("SubjectFee")
                        .HasColumnType("float");

                    b.HasKey("ExamID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.ExamCentre", b =>
                {
                    b.Property<int>("ExamCentreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamCentreID"));

                    b.Property<string>("AbbreviatedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AcomCentreID")
                        .HasColumnType("int");

                    b.Property<int>("AdressID")
                        .HasColumnType("int");

                    b.Property<int>("CentreType")
                        .HasColumnType("int");

                    b.Property<string>("ExamCentreCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamCentreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamType")
                        .HasColumnType("int");

                    b.Property<string>("HostCentreCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsROEOnly")
                        .HasColumnType("bit");

                    b.Property<int>("SchoolNature")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ExamCentreID");

                    b.HasIndex("AcomCentreID");

                    b.HasIndex("AdressID");

                    b.HasIndex("UserID");

                    b.ToTable("Examcentres");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.ExamSession", b =>
                {
                    b.Property<int>("ExamSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSessionID"));

                    b.Property<int>("ExamCentreID")
                        .HasColumnType("int");

                    b.Property<bool>("RegClose")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ExamSessionID");

                    b.HasIndex("ExamCentreID");

                    b.ToTable("ExamSessions");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Examiners.IndexCat", b =>
                {
                    b.Property<int>("IndexCatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexCatID"));

                    b.Property<string>("IndexCatCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndexCatName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndexCatID");

                    b.ToTable("IndexCats");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Examiners.Qualification", b =>
                {
                    b.Property<int>("QualificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QualificationID"));

                    b.Property<string>("QualificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualificationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QualificationID");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Examiners.Rank", b =>
                {
                    b.Property<int>("RankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankID"));

                    b.Property<string>("RankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RankID");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Examiners.SelectedExaminer", b =>
                {
                    b.Property<int>("SelectedExaminerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SelectedExaminerID"));

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndexCat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameofExaminer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoeCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SelectedExaminerID");

                    b.ToTable("SelectedExaminers");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Impairements.Impairment", b =>
                {
                    b.Property<int>("ImpairmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImpairmentID"));

                    b.Property<string>("ImpairmentDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpairmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImpairmentID");

                    b.ToTable("Impairments");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Impairements.ImpairmentDegree", b =>
                {
                    b.Property<int>("ImpairmentDegreeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImpairmentDegreeID"));

                    b.Property<string>("DegreeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImpairmentDegreeID");

                    b.ToTable("ImpairmentDegrees");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Impairements.ImpairmentSupport", b =>
                {
                    b.Property<int>("ImpairmentSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImpairmentSupportID"));

                    b.Property<int?>("ImpairmentID")
                        .HasColumnType("int");

                    b.Property<string>("SupportDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImpairmentSupportID");

                    b.HasIndex("ImpairmentID");

                    b.ToTable("ImpairmentSupports");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.SpecSubject", b =>
                {
                    b.Property<int>("SpecSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecSubjectID"));

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<bool>("Iscompulsory")
                        .HasColumnType("bit");

                    b.Property<int>("SpecialtyID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectGroupID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("SpecSubjectID");

                    b.HasIndex("ExamID");

                    b.HasIndex("SpecialtyID");

                    b.HasIndex("SubjectGroupID");

                    b.HasIndex("SubjectID");

                    b.ToTable("SpecSubjects");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Specialty", b =>
                {
                    b.Property<int>("SpecialtyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyID"));

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialtyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialtyType")
                        .HasColumnType("int");

                    b.HasKey("SpecialtyID");

                    b.ToTable("Specialies");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"));

                    b.Property<string>("AltSubCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("HasPract")
                        .HasColumnType("bit");

                    b.Property<bool>("MkSng")
                        .HasColumnType("bit");

                    b.Property<int>("NumPapers")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectTag")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.SubjectGroup", b =>
                {
                    b.Property<int>("SubjectGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectGroupID"));

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("int");

                    b.HasKey("SubjectGroupID");

                    b.ToTable("SubjectGroups");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.BannedCandidate", b =>
                {
                    b.Property<int>("BannedCandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannedCandidateID"));

                    b.Property<long>("BannedCandNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("BannedExamCode")
                        .HasColumnType("int");

                    b.Property<int>("BannedSession")
                        .HasColumnType("int");

                    b.Property<string>("CandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<long>("MinesecMatricule")
                        .HasColumnType("bigint");

                    b.HasKey("BannedCandidateID");

                    b.ToTable("BannedCandidates");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.CandSubject", b =>
                {
                    b.Property<int>("CandSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandSubjectID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("CandSubjectID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("SubjectID");

                    b.ToTable("CandSubjects");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.Candidate", b =>
                {
                    b.Property<int>("CandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateID"));

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CandNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ExamCentreID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<string>("MinesecMatricule")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture4x4Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ScanBirthCertificatePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScanG3FormPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScanHighDiplomaPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScanIDCardPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SpecialtyID")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialtyNAID")
                        .HasColumnType("int");

                    b.Property<int?>("SubDivisionID")
                        .HasColumnType("int");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CandidateID");

                    b.HasIndex("ExamCentreID");

                    b.HasIndex("ExamID");

                    b.HasIndex("SpecialtyID");

                    b.HasIndex("SpecialtyNAID");

                    b.HasIndex("SubDivisionID");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.Examiner", b =>
                {
                    b.Property<int>("ExaminerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExaminerID"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamCentreID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("ExaminerType")
                        .HasColumnType("int");

                    b.Property<string>("FullNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndexCatID")
                        .HasColumnType("int");

                    b.Property<int>("MarkExperience")
                        .HasColumnType("int");

                    b.Property<int>("QualificationID")
                        .HasColumnType("int");

                    b.Property<string>("ROECODE")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("RankID")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<string>("Specialisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialtyID")
                        .HasColumnType("int");

                    b.Property<int>("SubDivisionID")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("TeachExperience")
                        .HasColumnType("int");

                    b.HasKey("ExaminerID");

                    b.HasIndex("ExamCentreID");

                    b.HasIndex("ExamID");

                    b.HasIndex("IndexCatID");

                    b.HasIndex("QualificationID");

                    b.HasIndex("RankID");

                    b.HasIndex("SpecialtyID");

                    b.HasIndex("SubDivisionID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Examiners");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.ImpairmentCandidate", b =>
                {
                    b.Property<int>("ImpairmentCandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImpairmentCandidateID"));

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int?>("ImpairmentDegreeID")
                        .HasColumnType("int");

                    b.Property<int?>("ImpairmentID")
                        .HasColumnType("int");

                    b.Property<int?>("ImpairmentSupportID")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.HasKey("ImpairmentCandidateID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("ImpairmentDegreeID");

                    b.HasIndex("ImpairmentID");

                    b.HasIndex("ImpairmentSupportID");

                    b.ToTable("ImpairmentCandidates");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.ValidateRegistration", b =>
                {
                    b.Property<int>("ValidateRegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ValidateRegistrationID"));

                    b.Property<double>("AmtPaid")
                        .HasColumnType("float");

                    b.Property<int>("CandidateID")
                        .HasColumnType("int");

                    b.Property<int>("PmtCode")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.HasKey("ValidateRegistrationID");

                    b.HasIndex("CandidateID");

                    b.ToTable("ValidateRegistrations");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.AcomCentre", b =>
                {
                    b.Property<int>("AcomCentreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcomCentreID"));

                    b.Property<string>("AbbreviatedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcomCentreCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcomCentreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdressID")
                        .HasColumnType("int");

                    b.Property<string>("DivTag")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("AcomCentreID");

                    b.HasIndex("AdressID");

                    b.ToTable("AcomCentres");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.ActionMenuProfile", b =>
                {
                    b.Property<int>("ActionMenuProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionMenuProfileID"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<int>("ProfileID")
                        .HasColumnType("int");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.HasKey("ActionMenuProfileID");

                    b.HasIndex("MenuID");

                    b.HasIndex("ProfileID");

                    b.ToTable("ActionMenuProfiles");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.ActionSubMenuProfile", b =>
                {
                    b.Property<int>("ActionSubMenuProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionSubMenuProfileID"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileID")
                        .HasColumnType("int");

                    b.Property<int>("SubMenuID")
                        .HasColumnType("int");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.HasKey("ActionSubMenuProfileID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("SubMenuID");

                    b.ToTable("ActionSubMenuProfiles");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.GlobalPerson", b =>
                {
                    b.Property<int>("GlobalPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GlobalPersonID"));

                    b.Property<int>("AdressID")
                        .HasColumnType("int");

                    b.Property<string>("CNI")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiergroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlobalPersonID");

                    b.HasIndex("AdressID");

                    b.ToTable("GlobalPeople", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Job", b =>
                {
                    b.Property<int>("JobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobID"));

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobID");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuID"));

                    b.Property<int>("AppearanceOrder")
                        .HasColumnType("int");

                    b.Property<int>("IsShortcut")
                        .HasColumnType("int");

                    b.Property<string>("MenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuController")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MenuFlat")
                        .HasColumnType("bit");

                    b.Property<string>("MenuIconName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MenuState")
                        .HasColumnType("bit");

                    b.Property<bool>("MenuStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.HasKey("MenuID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleID"));

                    b.Property<int>("AppearanceOrder")
                        .HasColumnType("int");

                    b.Property<string>("ModuleArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ModuleState")
                        .HasColumnType("bit");

                    b.Property<bool>("ModuleStatus")
                        .HasColumnType("bit");

                    b.HasKey("ModuleID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Mouchard", b =>
                {
                    b.Property<int>("MouchardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MouchardID"));

                    b.Property<int?>("ExamcentreID")
                        .HasColumnType("int");

                    b.Property<string>("MoucharAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MoucharBusinessDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MoucharDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MoucharDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoucharHost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoucharHostAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoucharOperationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoucharProcedureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SneackHour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MouchardID");

                    b.HasIndex("ExamcentreID");

                    b.HasIndex("UserID");

                    b.ToTable("Mouchards");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Profile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<string>("ProfileCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileLevel")
                        .HasColumnType("int");

                    b.Property<bool>("ProfileState")
                        .HasColumnType("bit");

                    b.HasKey("ProfileID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Sex", b =>
                {
                    b.Property<int>("SexID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexID"));

                    b.Property<string>("SexCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SexLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SexID");

                    b.ToTable("Sexes");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.SubMenu", b =>
                {
                    b.Property<int>("SubMenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubMenuID"));

                    b.Property<int>("AppearanceOrder")
                        .HasColumnType("int");

                    b.Property<int>("IsShortcut")
                        .HasColumnType("int");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("SubMenuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMenuController")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMenuDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMenuIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMenuLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMenuPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubMenuState")
                        .HasColumnType("bit");

                    b.Property<bool>("SubMenuStatus")
                        .HasColumnType("bit");

                    b.HasKey("SubMenuID");

                    b.HasIndex("MenuID");

                    b.ToTable("SubMenus");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.TimeTable", b =>
                {
                    b.Property<int>("TimeTableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeTableID"));

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExamHours")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int?>("ExamMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ExamMoment")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PaperNumber")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartRmq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("TimeTableID");

                    b.HasIndex("ExamID");

                    b.HasIndex("SubjectID");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.People", b =>
                {
                    b.HasBaseType("Insfrastructure.Entities.Security.GlobalPerson");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<int>("SexID")
                        .HasColumnType("int");

                    b.HasIndex("SexID");

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.User", b =>
                {
                    b.HasBaseType("Insfrastructure.Entities.Security.People");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("int");

                    b.Property<int>("UserAccessLevel")
                        .HasColumnType("int");

                    b.Property<bool>("UserAccountState")
                        .HasColumnType("bit");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("JobID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Adress", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Localisation.SubDivision", "SubDivision")
                        .WithMany()
                        .HasForeignKey("SubDivisionID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SubDivision");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Division", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Localisation.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.Region", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Localisation.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Localisation.SubDivision", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Localisation.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.ExamCentre", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.AcomCentre", "AcomCentre")
                        .WithMany()
                        .HasForeignKey("AcomCentreID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Localisation.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcomCentre");

                    b.Navigation("Adress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.ExamSession", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.ExamCentre", "ExamCentre")
                        .WithMany()
                        .HasForeignKey("ExamCentreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamCentre");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.Impairements.ImpairmentSupport", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.Impairements.Impairment", "Impairment")
                        .WithMany()
                        .HasForeignKey("ImpairmentID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Impairment");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Parameters.SpecSubject", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.SubjectGroup", "SubjectGroup")
                        .WithMany()
                        .HasForeignKey("SubjectGroupID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Specialty");

                    b.Navigation("Subject");

                    b.Navigation("SubjectGroup");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.CandSubject", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Registration.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.Candidate", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.ExamCentre", "ExamCentre")
                        .WithMany()
                        .HasForeignKey("ExamCentreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Parameters.Specialty", "SpecialtyNA")
                        .WithMany()
                        .HasForeignKey("SpecialtyNAID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Localisation.SubDivision", "SubDivision")
                        .WithMany()
                        .HasForeignKey("SubDivisionID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Exam");

                    b.Navigation("ExamCentre");

                    b.Navigation("Specialty");

                    b.Navigation("SpecialtyNA");

                    b.Navigation("SubDivision");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.Examiner", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.ExamCentre", "ExamCentre")
                        .WithMany()
                        .HasForeignKey("ExamCentreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Examiners.IndexCat", "IndexCat")
                        .WithMany()
                        .HasForeignKey("IndexCatID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Examiners.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Examiners.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Parameters.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Localisation.SubDivision", "SubDivision")
                        .WithMany()
                        .HasForeignKey("SubDivisionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Exam");

                    b.Navigation("ExamCentre");

                    b.Navigation("IndexCat");

                    b.Navigation("Qualification");

                    b.Navigation("Rank");

                    b.Navigation("Specialty");

                    b.Navigation("SubDivision");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.ImpairmentCandidate", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Registration.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Impairements.ImpairmentDegree", "ImpairmentDegree")
                        .WithMany()
                        .HasForeignKey("ImpairmentDegreeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Parameters.Impairements.Impairment", "Impairment")
                        .WithMany()
                        .HasForeignKey("ImpairmentID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Parameters.Impairements.ImpairmentSupport", "ImpairmentSupport")
                        .WithMany()
                        .HasForeignKey("ImpairmentSupportID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Candidate");

                    b.Navigation("Impairment");

                    b.Navigation("ImpairmentDegree");

                    b.Navigation("ImpairmentSupport");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Registration.ValidateRegistration", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Registration.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.AcomCentre", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Localisation.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.ActionMenuProfile", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Security.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.ActionSubMenuProfile", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Security.SubMenu", "SubMenu")
                        .WithMany()
                        .HasForeignKey("SubMenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("SubMenu");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.GlobalPerson", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Localisation.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Menu", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.Mouchard", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.ExamCentre", "Examcentre")
                        .WithMany()
                        .HasForeignKey("ExamcentreID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Insfrastructure.Entities.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Examcentre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.SubMenu", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.TimeTable", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Parameters.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Parameters.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.People", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.GlobalPerson", null)
                        .WithOne()
                        .HasForeignKey("Insfrastructure.Entities.Security.People", "GlobalPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Security.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("Insfrastructure.Entities.Security.User", b =>
                {
                    b.HasOne("Insfrastructure.Entities.Security.People", null)
                        .WithOne()
                        .HasForeignKey("Insfrastructure.Entities.Security.User", "GlobalPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Security.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insfrastructure.Entities.Security.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Job");

                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
